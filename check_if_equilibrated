#!/usr/bin/env python3

import os
import glob
import subprocess
from tqdm import tqdm

def find_configs():
    """
    Returns all directories in the current working directory:
    assumes that these will be individual configs. Checks to 
    see if there is an .inp/.job file in the directory below
    """
    return [d for d in glob.glob('*/') 
           if any(f.endswith(x) for f in os.listdir(d) 
           for x in ('inp', 'job'))]

def find_logs():
    """
    Returns all log files
    """
    return glob.glob('**/*log', recursive=True)

def map_logs_to_each_config(configs, logs):
    """
    For each config (each subdirectory in the cwd),
    see if the log file is a descendant of that config.
    If it is, put it in a list associated with that 
    config
    """
    conf_dict = {conf[:-1]: [] for conf in configs}

    for log in logs:
        for k, v in conf_dict.items():
            if k in log:
                v.append(log)

    return conf_dict

def find_calc_type(log):
    """
    Reads first line of log file to find
    the software used
    """ 
    with open(log, 'r') as f:
        first_line = f.readline()

    software={'GAMESS': 'GAMESS',
              'Gaussian': ['g16', 'checkpoint']}
    
    for calc_type, options in software.items():
        if any(value in first_line for value in options):
            return calc_type

def equilibrated(log):
    """
    Checks to see if the structure has been optimised.
    """ 
    
    term_to_search_for = {'GAMESS': 'EQUILIBRIUM GEOMETRY LOCATED',
              'Gaussian': 'Optimization completed'}

    calc_type = find_calc_type(log)
    lookup = term_to_search_for[calc_type]    
    
    # grep exit codes:
    #    0: found data i.e optimised
    #    1: no data i.e. not optimised
    # subprocess.CalledProcessError called if non-zero exit code returned

    try:
        output = subprocess.check_output(f"grep '{lookup}' {log}",
                 stderr=subprocess.STDOUT, shell=True).decode('utf-8')
        return True
    except subprocess.CalledProcessError:
        return False

def check_configs_for_equilibration(config_dict):
    """
    Loops through the dictionary of the form
        { 'config' : [file1, file2, file3] }
    to see if there is an equilibrated geometry in any of the logs
    """
    no_equilibrium = []

    for config, logs in tqdm(config_dict.items()):
        found_equilibrium = False
        for log in logs:
            if equilibrated(log):
                found_equilibrium = True
        if not found_equilibrium:
            no_equilibrium.append(config)

    if len(no_equilibrium) > 0:
        print('No equilibrium found for:')
        for f in no_equilibrium:
            print('\t' + f)
    else:
        print('All structures optimised')

def main():
    configs = find_configs()
    logs = find_logs()
    config_dict = map_logs_to_each_config(configs, logs)
    check_configs_for_equilibration(config_dict)

main()
